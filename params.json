{"name":"TestMyCode","tagline":"","body":"### Contributing to TestMyCode repositories\r\n\r\n1. Find the correct [repository](https://github.com/testmycode) or repositories.\r\n2. Create an issue and briefly outline your plan before starting work on a patch. We'll do our best to comment in a timely manner.\r\n3. Set up a development environment as described in each projects README file. All products can be developed with the latest Ubuntu LTS. Other distros may require some fiddling. Root permissions are required for some things.\r\n4. Create a branch for your fix or feature. We prefer descriptive branch names.\r\n5. Write the code and tests.\r\n6. *Remember to run entire test suite before submitting a pull request.* (We know it takes ages to run but it does catch a lot of bugs.)\r\n\r\nIt is a good idea to submit your pull request early for feedback,\r\nor just link to your branch in an issue comment. Please try to do large changes\r\nin smaller iterations and have code reviewed and merged at reasonable checkpoints.\r\n\r\n### Coding conventions\r\n#### Ruby\r\nTMC-server and other ruby products follows a simple set of coding style conventions:\r\n\r\n* Two spaces, no tabs (for indentation).\r\n* No trailing whitespace. Blank lines should not have any spaces.\r\n* Indent after private/protected.\r\n* Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.\r\n* Prefer &&/|| over and/or.\r\n* Prefer class << self over self.method for class methods.\r\n* Use MyClass.my_method(my_arg) not my_method( my_arg ) or my_method\r\nmy_arg.\r\n* Use a = b and not a=b.\r\n* Prefer method { do_stuff } instead of method{do_stuff} for single-line\r\nblocks.\r\n* Follow the conventions in the source you see used already.\r\n\r\n#### Java\r\n* Four spaces, no tabs (for indentation).\r\n* Follow the conventions in the source you see used already.\r\n* No trailing whitespace. Blank lines should not have any spaces.\r\n* No blank lines after method definitions ifs, whiles etc.\r\n* No unnecessary final attributes inside methods or for parameters\r\n* No space between method name and opening parenthesis; one space between keywords like if, while, ... and opening parenthesis\r\n* Follow http://google-styleguide.googlecode.com/svn/trunk/javaguide.html unless particular guidance overwritten here.\r\n\r\n#### Javascript\r\n* No tabs (for indentation).\r\n* No trailing whitespace. Blank lines should not have any spaces.\r\n* Follow http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml unless particular guidance overwritten here.\r\n\r\nThe above are guidelines - please use your best judgment in using them.\r\nMost importantly keep using the same coding standards as already used in\r\nthat particular file. If particular file does not comply with guidelines above, feel free to update that file to comply with guidelines. \r\n\r\n\r\n### Reporting issues\r\n\r\nWe accept only issues reported in GitHub. However before reporting issues to GitHub discussion with maintainers is advised.\r\n\r\nDo a search in GitHub under Issues in case it has already been reported.\r\nIf you do not find any issue addressing it you may proceed to open a new\r\none. (In case of security issues, alert maintainers in private, don't\r\npost it to out public issue tracker.)\r\n\r\nYour issue report should contain a title and a clear description of the issue at the bare minimum. \r\nYou should include as much relevant information as possible and should at least post a code sample that\r\ndemonstrates the issue or steps to reproduce the issue. \r\nIt would be even better if you could include a unit test that shows how the expected behavior is not occurring. \r\nYour goal should be to make it easy for yourself - and others - to replicate the bug and figure out a fix.\r\n\r\n### Creating feature requests\r\n\r\nWe accept also feature requests as issues reported in GitHub, the issue should clearly indicate that it is a feature request.\r\n\r\nHowever it is suggested to first discuss with maintainers about your feature request to make sure creating new issue to GitHub.\r\n\r\n### Testing others pull requests\r\n\r\nTo apply someone's changes you need first to create a dedicated branch:\r\n``` shell\r\n$ git checkout -b testing_branch\r\n```\r\n\r\nThen you can use their remote branch to update your codebase. For\r\nexample, let's say the GitHub user Jamox has forked and pushed to a\r\ntopic branch \"feature\" located at https://github.com/Jamox/tmc-server.\r\n``` shell\r\n$ git remote add Jamox git://github.com/Jamox/tmc-server.git\r\n$ git pull Jamox feature\r\n```\r\nAfter applying their branch, test it out!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}