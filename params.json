{"name":"TestMyCode","tagline":"","body":"Test My Code (\"TMC\") is a tool to automate most of the exercise checking when teaching programming. It runs code submitted by students, gives feedback if tests fail and maintains a scoreboard. This allows for lots of small exercises without the need for course instructors to manually go through all of them.\r\n\r\nThe system has been used with great success by thousands of users in the University of Helsinki elementary CS courses as well as their [open MOOC versions](http://mooc.fi/).\r\n\r\n### The code\r\n\r\nAll of the code is available under https://github.com/testmycode\r\n\r\nThe main components are:\r\n* [The server](https://github.com/testmycode/tmc-server)\r\n* [The NetBeans plugin](https://github.com/testmycode/tmc-netbeans)\r\n* [The UML sandbox](https://github.com/testmycode/tmc-sandbox)\r\n\r\nThe current maintainers are [@mpartel](https://github.com/mpartel) and [@jamox](https://github.com/jamox).\r\n\r\nIRC: #testmycode @ Freenode\r\n\r\n### Contributing\r\n\r\nFor new features, we recommend you discuss your idea first with the maintainers on IRC at #testmycode @ Freenode, just to guard against any duplicate efforts and to give us a chance to point you at the right component(s) for making the change. For large changes, it may make sense to create one or more GitHub issues to track progress.\r\n\r\nAfter that, just:\r\n\r\n1. Find the correct [repository](https://github.com/testmycode).\r\n2. Set up a development environment as described in each projects README file. All products can be developed with the latest Ubuntu LTS. Other distros may require some fiddling. Root permissions are required for some things.\r\n3. Create a branch for your fix or feature.\r\n4. Write the code and tests.\r\n5. *Remember to run entire test suite before submitting or updating a pull request.* (We know it takes ages to run but it does catch a lot of bugs.)\r\n\r\nIt is a good idea to submit your pull request early for feedback,\r\nor just link to your branch in an issue comment. Please try to do large changes\r\nin smaller iterations and have code reviewed and merged at reasonable checkpoints.\r\n\r\n### Coding conventions\r\n\r\nMostly just try to stick to the style you see used in the project.\r\n\r\n#### Ruby\r\n* Indentation: two spaces, no tabs.\r\n* No trailing whitespace, even on blank lines.\r\n* Indent before private/protected.\r\n* Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.\r\n* Prefer `&&` and `||` over `and` and `or`.\r\n* Prefer `extend self` over `def self.method` for modules.\r\n* Write method calls like `foo(bar, baz)` (parenthesis may be omitted in very clear cases, but it is not required)\r\n* Spaces around operators: `a = b + c`, not `a=b+c`.\r\n* Single-line blocks should use braces like this: `foo {|x| stuff(x) }`.\r\n* Multiline blocks should use `do |x|` syntax.\r\n\r\n#### Java\r\n* Indentation: four spaces, no tabs.\r\n* No trailing whitespace, even on blank lines.\r\n* No blank lines after method definitions ifs, whiles etc.\r\n* No unnecessary final attributes inside methods or for parameters\r\n* Method calls have no space before or after paren: `foo(bar, baz)`.\r\n* Keywords have space before paren: `if (foo)` etc.\r\n* In other matters, refer to http://google-styleguide.googlecode.com/svn/trunk/javaguide.html unless the surrounding code clearly and consistently disagrees.\r\n\r\n#### Javascript\r\n* Indentation: two spaces, no tabs.\r\n* No trailing whitespace, even on blank lines.\r\n* Follow http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml unless the surrounding code clearly and consistently disagrees.\r\n\r\nSome files in the project may not completely adhere to the above guidelines. Feel free to update any such files as you go.\r\n\r\n### Reporting issues\r\n\r\nIt's best to report issues in the correct GitHub repository. If in doubt, report to either the [tmc-server](https://github.com/testmycode/tmc-server) or the [tmc-netbeans](https://github.com/testmycode/tmc-netbeans) repository.\r\n\r\nBefore reporting, please do a search to see if the issue has already been reported.\r\n\r\nFeature requests are also welcome in the issue tracker.\r\n\r\nYou are also very welcome to ask any questions or discuss ideas on IRC at #testmycode @ Freenode.\r\n\r\n### Testing someone's pull request\r\n\r\nFirst, create a branch to merge the changes into:\r\n``` shell\r\n$ git checkout -b testing_branch\r\n```\r\n\r\nNow merge their remote branch into your testing branch.\r\nFor example, let's say the GitHub user `jamox` has forked and pushed to a\r\ntopic branch \"feature\" located at https://github.com/jamox/tmc-server.\r\n``` shell\r\n$ git remote add jamox git://github.com/jamox/tmc-server.git\r\n$ git pull jamox feature\r\n```\r\n\r\nRemember to run database migrations and recompile things as necessary.\r\n\r\nWhen you're done, switch back to the master branch and delete the testing branch.\r\n\r\n``` shell\r\n$ git checkout master\r\n$ git branch -D testing_branch\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}